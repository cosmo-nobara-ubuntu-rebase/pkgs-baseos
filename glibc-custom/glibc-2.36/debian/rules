#! /usr/bin/make -f

# DEB options
DEB_BUILD_OPTIONS=nocheck

# Build tree vars
curpass = libc
build-tree := build-tree
debian-tmp = debian/tmp
debian-tmp-i386 = debian/tmp-i386
debian-tmp-x32 = debian/tmp-x32
debian-tmp-amd64 = debian/tmp-amd64
stamp := $(CURDIR)/stamp-dir/
DUMMY := $(shell mkdir -p $(stamp))


# imported from tarball.mk
GLIBC_GIT = https://sourceware.org/git/glibc.git
GLIBC_BRANCH = release/$(DEB_VERSION_UPSTREAM)/master
GLIBC_TAG = glibc-$(DEB_VERSION_UPSTREAM)
GLIBC_CHECKOUT = glibc-checkout
GLIBC_DIR = glibc-$(DEB_VERSION_UPSTREAM)
GIT_UPDATES_DIFF = debian/patches/git-updates.diff

# The minimum package version with which these packages are compatible.
shlib_dep_ver = $(DEB_VERSION_UPSTREAM)
shlib_dep = $(libc) (>= $(shlib_dep_ver))

DEB_BUILDDIR ?= $(build-tree)/$(DEB_HOST_ARCH)-$(curpass)
DEB_BUILDDIR_i386 ?= $(build-tree)/$(DEB_HOST_ARCH)-$(curpass)-i386
DEB_BUILDDIR_x32 ?= $(build-tree)/$(DEB_HOST_ARCH)-$(curpass)-x32
DEB_BUILDDIR_amd64 ?= $(build-tree)/$(DEB_HOST_ARCH)-$(curpass)-amd64
DEB_BUILDDIRLIBC ?= $(build-tree)/$(DEB_HOST_ARCH)-libc

GLIBC_SOURCES = $(filter-out debian $(shell basename $(stamp)) $(build-tree), $(wildcard *))

# Support multiple makes at once based on number of processors
ifneq (,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
NJOBS := -j $(patsubst parallel=%,%,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
endif

# use the package settings, not the settings from the environment
define unsetenv
  unexport $(1)
  $(1) =
endef
$(foreach v, CPPFLAGS CFLAGS CXXFLAGS LDFLAGS, $(if $(filter environment,$(origin $(v))),$(eval $(call unsetenv, $(v)))))

# Compiler Settings
CC     = $(DEB_HOST_GNU_TYPE)-$(BASE_CC)$(DEB_GCC_VERSION)
CXX    = $(DEB_HOST_GNU_TYPE)-$(BASE_CXX)$(DEB_GCC_VERSION)
DEB_CC     = $(DEB_HOST_GNU_TYPE)-$(BASE_CC)
DEB_CXX    = $(DEB_HOST_GNU_TYPE)-$(BASE_CXX)
MIG    = $(DEB_HOST_GNU_TYPE)-$(BASE_MIG)
BUILD_CC = $(DEB_BUILD_GNU_TYPE)-$(BASE_CC)
BUILD_CXX = $(DEB_BUILD_GNU_TYPE)-$(BASE_CXX)
BUILD_CFLAGS = -O2 -g -fdebug-prefix-map=$(CURDIR)=.
BUILD_MIG = $(DEB_BUILD_GNU_TYPE)-$(BASE_MIG)
HOST_CFLAGS = -O2 -g -fdebug-prefix-map=$(CURDIR)=. $(extra_cflags)
BASE_CC = gcc
BASE_CXX = g++
BASE_MIG = mig
DEB_GCC_VERSION ?= -12

RUN_TESTSUITE = yes
TIMEOUTFACTOR = 25

# export debhelper substitution variables
export $(build-tree)

# Default setup
GLIBC_PASSES ?= libc

rtld_so=$(shell awk 'BEGIN {FS="="} /^ld\.so-version/ {print $$2}' $(DEB_BUILDDIR)/soversions.mk)
libc_so=$(shell awk 'BEGIN {FS="="} /^libc\.so-version/ {print "libc.so"$$2}' $(DEB_BUILDDIR)/soversions.mk)

# Glibc configparms
prefix=/usr
bindir=$(prefix)/bin
datadir=$(prefix)/share
complocaledir=$(prefix)/lib/locale
sysconfdir=/etc
libexecdir=$(prefix)/lib
rootsbindir=/sbin
includedir=$(prefix)/include
docdir=$(prefix)/share/doc
mandir=$(prefix)/share/man
sbindir=$(prefix)/sbin
vardbdir=/var/lib/misc
rtlddir=/lib
slibdir=/lib/$(DEB_HOST_MULTIARCH)
libdir=/usr/lib/$(DEB_HOST_MULTIARCH)
mvec = no
with_headers = --with-headers=$(includedir) --disable-sanity-checks --enable-hacker-mode 
extra_config_options = --with-default-link

# Make sure to use the just built localedef for native builds. When
# cross-compiling use the system localedef passing --little-endian
# or --big-endian to select the correct endianess. A cross-specific
# build-dependency makes sure that the correct version is used, as
# the format might change between upstream versions.
ifeq ($(DEB_BUILD_ARCH),$(DEB_HOST_ARCH))
LOCALEDEF = I18NPATH=$(CURDIR)/localedata \
	    GCONV_PATH=$(CURDIR)/$(DEB_BUILDDIRLIBC)/iconvdata \
	    LC_ALL=C \
	    $(CURDIR)/$(DEB_BUILDDIRLIBC)/elf/ld.so --library-path $(CURDIR)/$(DEB_BUILDDIRLIBC) \
	    $(CURDIR)/$(DEB_BUILDDIRLIBC)/locale/localedef
else
LOCALEDEF = I18NPATH=$(CURDIR)/localedata GCONV_PATH=$(CURDIR)/$(DEB_BUILDDIRLIBC)/iconvdata LC_ALL=C localedef --$(DEB_HOST_ARCH_ENDIAN)-endian 
endif
# 
.PHONY: override_dh_auto_clean
.PHONY: override_dh_auto_configure
.PHONY: override_dh_auto_build

%:
	dh $@ 

override_dh_clean:
	dh_clean 
	rm -rf build-tree/i386-libc
	rm -rf build-tree/amd64-libc
	rm -rf $(DEB_BUILDDIR)
	rm -rf $(DEB_BUILDDIR_i386) 
	rm -rf $(DEB_BUILDDIR_x32) 
	rm -rf $(DEB_BUILDDIR_amd64)
	rm -rf $(debian-tmp)
	rm -rf $(debian-tmp-i386)
	rm -rf $(debian-tmp-x32)
	rm -rf $(debian-tmp-amd64)
	rm -rf $(build-tree)/locales-all
	rm -rf $(build-tree)/C.utf8

override_dh_auto_clean:
	echo "dh_auto_clean is disabled"
override_dh_autoreconf:
	echo "dh_autoreconf is disabled"	
override_dh_auto_configure:
	test -d $(DEB_BUILDDIR) || mkdir -p $(DEB_BUILDDIR)
	#
	rm -f $(DEB_BUILDDIR)/configparms
	echo "BASH := /bin/bash"                  >> $(DEB_BUILDDIR)/configparms
	echo "KSH := /bin/bash"                   >> $(DEB_BUILDDIR)/configparms
	echo "SHELL := /bin/bash"                 >> $(DEB_BUILDDIR)/configparms
	echo "bindir = $(bindir)"                 >> $(DEB_BUILDDIR)/configparms
	echo "datadir = $(datadir)"               >> $(DEB_BUILDDIR)/configparms
	echo "complocaledir = $(complocaledir)"   >> $(DEB_BUILDDIR)/configparms
	echo "sysconfdir = $(sysconfdir)"         >> $(DEB_BUILDDIR)/configparms
	echo "libexecdir = $(libexecdir)"         >> $(DEB_BUILDDIR)/configparms
	echo "rootsbindir = $(rootsbindir)"       >> $(DEB_BUILDDIR)/configparms
	echo "includedir = $(includedir)" >> $(DEB_BUILDDIR)/configparms
	echo "docdir = $(docdir)"                 >> $(DEB_BUILDDIR)/configparms
	echo "mandir = $(mandir)"                 >> $(DEB_BUILDDIR)/configparms
	echo "sbindir = $(sbindir)"               >> $(DEB_BUILDDIR)/configparms
	echo "vardbdir = $(vardbdir)"             >> $(DEB_BUILDDIR)/configparms
	echo "rtlddir = $(rtlddir)"       >> $(DEB_BUILDDIR)/configparms
	# clone configrations
	cp -rf $(DEB_BUILDDIR) $(DEB_BUILDDIR_i386)
	cp -rf $(DEB_BUILDDIR) $(DEB_BUILDDIR_x32)
	cp -rf $(DEB_BUILDDIR) $(DEB_BUILDDIR_amd64)
override_dh_auto_build:
ifeq (amd64,$(DEB_HOST_ARCH))
	### libc6:$(DEB_HOST_ARCH)
	### Add configparms override
	echo "libdir = $(libdir)"         >> $(DEB_BUILDDIR)/configparms
	echo "slibdir = $(slibdir)"       >> $(DEB_BUILDDIR)/configparms
	echo "install_root = $(CURDIR)/$(debian-tmp)" >> $(DEB_BUILDDIR)/configparms
	echo "LIBGD = yes"                        >> $(DEB_BUILDDIR)/configparms
	echo "MIG=$(MIG)" >> $(DEB_BUILDDIR)/configparms
	echo "BUILD_CC=$(BUILD_CC)" >> $(DEB_BUILDDIR)/configparms
	echo "BUILD_CXX=$(BUILD_CXX)"  >> $(DEB_BUILDDIR)/configparms
	echo "CFLAGS=$(HOST_CFLAGS) -lm" >> $(DEB_BUILDDIR)/configparms
	echo "ASFLAGS=$(HOST_CFLAGS) -lm"  >> $(DEB_BUILDDIR)/configparms
	echo "BUILD_CFLAGS=$(BUILD_CFLAGS) -lm" >> $(DEB_BUILDDIR)/configparms	
	#
	echo -n "Build started: " ; date --rfc-2822; \
	echo "---------------"; \
	cd $(DEB_BUILDDIR) && \
		CC=gcc \
		CXX=g++ \
		AUTOCONF=false \
		MAKEINFO=: \
		$(CURDIR)/configure \
		--prefix=/usr \
		--enable-add-ons=$(standard-add-ons)"$(add-ons)" \
		--enable-stackguard-randomization \
		--enable-stack-protector=strong \
		--with-pkgversion="Debian GLIBC $(DEB_VERSION)" \
		--with-bugurl="http://www.debian.org/Bugs/" \
		--with-timeoutfactor="$(TIMEOUTFACTOR)" \
		--enable-pt_chown \
		--disable-crypt \
		--enable-kernel=3.2 \
		--enable-static-pie \
		--enable-multi-arch \
		--enable-cet \
		$(with_headers) $(extra_config_options)
	@echo Building $(curpass):amd64
	$(MAKE) -C $(DEB_BUILDDIR) $(NJOBS)
	echo "---------------"
	echo -n "Build ended: " ; date --rfc-2822
	cd ../../
	### libc6-i386:amd64
	### Add configparms override
	echo "libdir = /usr/lib32"         >> $(DEB_BUILDDIR_i386)/configparms
	echo "slibdir = /lib32"       >> $(DEB_BUILDDIR_i386)/configparms
	echo "LIBGD = no"                        >> $(DEB_BUILDDIR_i386)/configparms
	echo "build-programs=yes" >> $(DEB_BUILDDIR_i386)/configparms
	echo "install_root = $(CURDIR)/$(debian-tmp-i386)" >> $(DEB_BUILDDIR_i386)/configparms
	echo "MIG=$(MIG)" >> $(DEB_BUILDDIR_i386)/configparms
	echo "BUILD_CC=$(BUILD_CC)" >> $(DEB_BUILDDIR_i386)/configparms
	echo "BUILD_CXX=$(BUILD_CXX)"  >> $(DEB_BUILDDIR_i386)/configparms
	echo "CFLAGS=$(HOST_CFLAGS) -march=i686 -m32 -lm" >> $(DEB_BUILDDIR_i386)/configparms
	echo "ASFLAGS=$(HOST_CFLAGS) -march=i686 -m32 -lm"  >> $(DEB_BUILDDIR_i386)/configparms
	echo "BUILD_CFLAGS=$(BUILD_CFLAGS) -march=i686 -m32 -lm" >> $(DEB_BUILDDIR_i386)/configparms
	#
	echo -n "Build started: " ; date --rfc-2822; \
	echo "---------------"; \
	cd $(DEB_BUILDDIR_i386) && \
		CC="gcc -m32" \
		CXX="g++ -m32" \
		AUTOCONF=false \
		MAKEINFO=: \
		$(CURDIR)/configure \
		--build=i686-pc-linux-gnu \
		--prefix=/usr \
		--enable-add-ons=$(standard-add-ons)"$(add-ons)" \
		--enable-stackguard-randomization \
		--enable-stack-protector=strong \
		--with-pkgversion="Debian GLIBC $(DEB_VERSION)" \
		--with-bugurl="http://www.debian.org/Bugs/" \
		--with-timeoutfactor="$(TIMEOUTFACTOR)" \
		--disable-crypt \
		--enable-kernel=3.2 \
		--enable-static-pie \
		--enable-multi-arch \
		--enable-cet \
		$(with_headers) $(extra_config_options)
	@echo Building $(curpass)-i386:amd64
	$(MAKE) cross-compiling=yes -C $(DEB_BUILDDIR_i386) $(NJOBS) csu/subdir_lib
	echo "---------------"
	echo -n "Build ended: " ; date --rfc-2822
	cd ../../
	echo -n "x32 build deprecated in ubuntu 22.10: not building" ; date --rfc-2822
#	### libc6-x32:amd64
#	### Add configparms override
#	echo "libdir = /usr/libx32"         >> $(DEB_BUILDDIR_x32)/configparms
#	echo "slibdir = /libx32"       >> $(DEB_BUILDDIR_x32)/configparms
#	echo "LIBGD = no"                        >> $(DEB_BUILDDIR_x32)/configparms
#	echo "build-programs=yes" >> $(DEB_BUILDDIR_x32)/configparms
#	echo "install_root = $(CURDIR)/$(debian-tmp-x32)" >> $(DEB_BUILDDIR_x32)/configparms
#	#
#	echo -n "Build started: " ; date --rfc-2822; \
#	echo "---------------"; \
#	cd $(DEB_BUILDDIR_x32) && \
#		CC="$(BUILD_CC) -mx32" \
#		CC="$(BUILD_CXX) -mx32" \
#		MIG="$(MIG)" \
#		BUILD_CC="$(BUILD_CC) -mx32" \
#		BUILD_CXX="$(BUILD_CXX) -mx32" \
#		CFLAGS="$(HOST_CFLAGS)  -mx32" \
#		ASFLAGS="$(HOST_CFLAGS)  -mx32" \
#		BUILD_CFLAGS="$(BUILD_CFLAGS)  -mx32" \
#		CC=gcc \
#		CXX=g++ \
#		AUTOCONF=false \
#		MAKEINFO=: \
#		$(CURDIR)/configure \
#		--build=x86_64-x32-linux \
#		--prefix=/usr \
#		--enable-add-ons=$(standard-add-ons)"$(add-ons)" \
#		--enable-stackguard-randomization \
#		--enable-stack-protector=strong \
#		--with-pkgversion="Debian GLIBC $(DEB_VERSION)" \
#		--with-bugurl="http://www.debian.org/Bugs/" \
#		--with-timeoutfactor="$(TIMEOUTFACTOR)" \
#		--disable-crypt \
#		--enable-kernel=3.2 \
#		--with-selinux \
#		--enable-systemtap \
#		--enable-multi-arch \
#		--enable-static-pie \
#		--enable-cet \
#		$(with_headers) $(extra_config_options)
#	@echo Building $(curpass)-x32:amd64
#	$(MAKE) cross-compiling=yes -C $(DEB_BUILDDIR_x32) $(NJOBS) install_root=$(CURDIR)/$(debian-tmp-x32)  install-bootstrap-headers=yes install-headers
#	echo "---------------"
#	echo -n "Build ended: " ; date --rfc-2822
#	cd ../../
endif
ifeq (i386,$(DEB_HOST_ARCH))
	### libc6:$(DEB_HOST_ARCH)
	### Add configparms override
	echo "libdir = $(libdir)"         >> $(DEB_BUILDDIR)/configparms
	echo "slibdir = $(slibdir)"       >> $(DEB_BUILDDIR)/configparms
	echo "install_root = $(CURDIR)/$(debian-tmp)" >> $(DEB_BUILDDIR)/configparms
	echo "LIBGD = yes"                        >> $(DEB_BUILDDIR)/configparms
	echo "MIG=$(MIG)" >> $(DEB_BUILDDIR)/configparms
	echo "BUILD_CC=$(BUILD_CC)" >> $(DEB_BUILDDIR)/configparms
	echo "BUILD_CXX=$(BUILD_CXX)"  >> $(DEB_BUILDDIR)/configparms
	echo "CFLAGS=$(HOST_CFLAGS)  -lm -mno-tls-direct-seg-refs" >> $(DEB_BUILDDIR)/configparms
	echo "ASFLAGS=$(HOST_CFLAGS)  -lm -mno-tls-direct-seg-refs"  >> $(DEB_BUILDDIR)/configparms
	echo "BUILD_CFLAGS=$(BUILD_CFLAGS)  -lm -mno-tls-direct-seg-refs" >> $(DEB_BUILDDIR)/configparms
	#
	echo -n "Build started: " ; date --rfc-2822; \
	echo "---------------"; \
	cd $(DEB_BUILDDIR) && \
		CC=gcc \
		CXX=g++ \
		AUTOCONF=false \
		MAKEINFO=: \
		$(CURDIR)/configure \
		--prefix=/usr \
		--build=i686-pc-linux-gnu \
		--enable-add-ons=$(standard-add-ons)"$(add-ons)" \
		--enable-stackguard-randomization \
		--enable-stack-protector=strong \
		--with-pkgversion="Debian GLIBC $(DEB_VERSION)" \
		--with-bugurl="http://www.debian.org/Bugs/" \
		--with-timeoutfactor="$(TIMEOUTFACTOR)" \
		--enable-pt_chown \
		--disable-crypt \
		--enable-kernel=3.2 \
		--with-selinux \
		--enable-static-pie \
		--enable-multi-arch \
		--enable-cet \
		$(with_headers) $(extra_config_options)
	@echo Building $(curpass):i386
	$(MAKE) -C $(DEB_BUILDDIR) $(NJOBS)
	echo "---------------"
	echo -n "Build ended: " ; date --rfc-2822
	cd ../../
	### libc6-amd64:i386
	### Add configparms override
	echo "libdir = /usr/lib64"         >> $(DEB_BUILDDIR_amd64)/configparms
	echo "slibdir = /lib64"       >> $(DEB_BUILDDIR_amd64)/configparms
	echo "LIBGD = no"                        >> $(DEB_BUILDDIR_amd64)/configparms
	echo "build-programs=yes" >> $(DEB_BUILDDIR_amd64)/configparms
	echo "install_root = $(CURDIR)/$(debian-tmp-amd64)" >> $(DEB_BUILDDIR_amd64)/configparms
	echo "MIG=$(MIG)" >> $(DEB_BUILDDIR_amd64)/configparms
	echo "BUILD_CC=$(BUILD_CC)"  >> $(DEB_BUILDDIR_amd64)/configparms
	echo "BUILD_CXX=$(BUILD_CXX)"  >> $(DEB_BUILDDIR_amd64)/configparms
	echo "CFLAGS=$(HOST_CFLAGS) -m64 -lm" >> $(DEB_BUILDDIR_amd64)/configparms
	echo "ASFLAGS=$(HOST_CFLAGS) -m64 -lm"  >> $(DEB_BUILDDIR_amd64)/configparms
	echo "BUILD_CFLAGS=$(BUILD_CFLAGS) -m64 -lm" >> $(DEB_BUILDDIR_amd64)/configparms
	#
	echo -n "Build started: " ; date --rfc-2822; \
	echo "---------------"; \
	cd $(DEB_BUILDDIR_amd64) && \
		CC="gcc -m64" \
		CXX="g++ -m64" \
		AUTOCONF=false \
		MAKEINFO=: \
		$(CURDIR)/configure \
		--build=x86_64-linux-gnu \
		--prefix=/usr \
		--enable-add-ons=$(standard-add-ons)"$(add-ons)" \
		--enable-stackguard-randomization \
		--enable-stack-protector=strong \
		--with-pkgversion="Debian GLIBC $(DEB_VERSION)" \
		--with-bugurl="http://www.debian.org/Bugs/" \
		--with-timeoutfactor="$(TIMEOUTFACTOR)" \
		--disable-crypt \
		--enable-kernel=3.2 \
		--enable-static-pie \
		--enable-multi-arch \
		--enable-cet \
		$(with_headers) $(extra_config_options) --disable-mathvec 
	@echo Building $(curpass)-amd64:i386
	#$(MAKE) cross-compiling=yes -C $(DEB_BUILDDIR_amd64) $(NJOBS) install_root=$(CURDIR)/$(debian-tmp-amd64)  install-bootstrap-headers=yes install-headers
	$(MAKE) cross-compiling=yes -C $(DEB_BUILDDIR_amd64) $(NJOBS) csu/subdir_lib
	echo "---------------"
	echo -n "Build ended: " ; date --rfc-2822
	cd ../../
	echo -n "x32 build deprecated in ubuntu 22.10: not building" ; date --rfc-2822
#	### libc6-x32:i386
#	### Add configparms override
#	echo "libdir = /usr/libx32"         >> $(DEB_BUILDDIR_x32)/configparms
#	echo "slibdir = /libx32"       >> $(DEB_BUILDDIR_x32)/configparms
#	echo "LIBGD = no"                        >> $(DEB_BUILDDIR_x32)/configparms
#	echo "build-programs=yes" >> $(DEB_BUILDDIR_x32)/configparms
#	echo "install_root = $(CURDIR)/$(debian-tmp-x32)" >> $(DEB_BUILDDIR_x32)/configparms
#	#
#	echo -n "Build started: " ; date --rfc-2822; \
#	echo "---------------"; \
#	cd $(DEB_BUILDDIR_x32) && \
#		CC="$(BUILD_CC) -mx32" \
#		CC="$(BUILD_CXX) -mx32" \
#		MIG="$(MIG)" \
#		BUILD_CC="$(BUILD_CC) -mx32" \
#		BUILD_CXX="$(BUILD_CXX) -mx32" \
#		CFLAGS="$(HOST_CFLAGS)  -mx32" \
#		ASFLAGS="$(HOST_CFLAGS)  -mx32" \
#		BUILD_CFLAGS="$(BUILD_CFLAGS)  -mx32" \
#		CC=gcc \
#		CXX=g++ \
#		AUTOCONF=false \
#		MAKEINFO=: \
#		$(CURDIR)/configure \
#		--build=x86_64-x32-linux \
#		--prefix=/usr \
#		--enable-add-ons=$(standard-add-ons)"$(add-ons)" \
#		--enable-stackguard-randomization \
#		--enable-stack-protector=strong \
#		--with-pkgversion="Debian GLIBC $(DEB_VERSION)" \
#		--with-bugurl="http://www.debian.org/Bugs/" \
#		--with-timeoutfactor="$(TIMEOUTFACTOR)" \
#		--disable-crypt \
#		--enable-kernel=3.2 \
#		--with-selinux \
#		--enable-systemtap \
#		--enable-multi-arch \
#		--enable-static-pie \
#		--enable-cet \
#		$(with_headers) $(extra_config_options)
#	@echo Building $(curpass)-x32:amd64
#	$(MAKE) cross-compiling=yes -C $(DEB_BUILDDIR_x32) $(NJOBS) install_root=$(CURDIR)/$(debian-tmp-x32)  install-bootstrap-headers=yes install-headers
#	echo "---------------"
#	echo -n "Build ended: " ; date --rfc-2822
#	cd ../../
endif
override_dh_auto_install:
ifeq (amd64,$(DEB_HOST_ARCH))
# libc6:$(DEB_HOST_ARCH)
	dh_auto_install --builddirectory=$(DEB_BUILDDIR)
# fixes from build.mk
	# Install the Python pretty printers
	mkdir -p $(CURDIR)/$(debian-tmp)/usr/share/gdb/auto-load/$(slibdir)
	perl -pe 'BEGIN {undef $$/; open(IN, "$(DEB_BUILDDIR)/nptl/nptl_lock_constants.py"); $$j=<IN>;} s/from nptl_lock_constants import \*/$$j/g;' $(CURDIR)/nptl/nptl-printers.py > $(CURDIR)/$(debian-tmp)/usr/share/gdb/auto-load/$(slibdir)/libc.so.6-gdb.py
	# Install an empty libpthread_nonshared.a to support broken closed
	# source software.
	ar crv $(CURDIR)/$(debian-tmp)/$(libdir)/libpthread_nonshared.a
	#
	mkdir -p $(debian-tmp)/etc/ld.so.conf.d
	touch "$(debian-tmp)/etc/ld.so.conf.d/x86_64-linux-gnu.conf"
	printf "# Multiarch support\n/usr/local/lib/x86_64-linux-gnu\n/lib/x86_64-linux-gnu\n/usr/lib/x86_64-linux-gnu" | tee "$(debian-tmp)/etc/ld.so.conf.d/x86_64-linux-gnu.conf" > /dev/null
	mkdir -p "$(debian-tmp)/var/cache/ldconfig"
	mkdir -p "$(debian-tmp)/lib64"
	ln -sf /lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 "$(debian-tmp)/lib64/ld-linux-x86-64.so.2" 
	# Create the multiarch include directories
	mkdir -p $(debian-tmp)/usr/include/$(DEB_HOST_MULTIARCH)
	mv $(debian-tmp)/usr/include/bits $(debian-tmp)/usr/include/$(DEB_HOST_MULTIARCH)
	mv $(debian-tmp)/usr/include/gnu $(debian-tmp)/usr/include/$(DEB_HOST_MULTIARCH)
	mv $(debian-tmp)/usr/include/sys $(debian-tmp)/usr/include/$(DEB_HOST_MULTIARCH)
	mv $(debian-tmp)/usr/include/fpu_control.h $(debian-tmp)/usr/include/$(DEB_HOST_MULTIARCH)
	mv $(debian-tmp)/usr/include/a.out.h $(debian-tmp)/usr/include/$(DEB_HOST_MULTIARCH)
	mv $(debian-tmp)/usr/include/ieee754.h $(debian-tmp)/usr/include/$(DEB_HOST_MULTIARCH)
	mkdir -p $(debian-tmp)/usr/include/finclude/$(DEB_HOST_MULTIARCH)
	mv $(debian-tmp)/usr/include/finclude/math-vector-fortran.h $(debian-tmp)/usr/include/finclude/$(DEB_HOST_MULTIARCH)
	# Get rid of un-needed files
	rm -rf $(debian-tmp)/etc/ld.so.cache || echo "un-needed file not found!"
	rm -rf $(debian-tmp)/etc/rpc || echo "un-needed file not found!"
	rm -rf $(debian-tmp)/var/lib/misc/Makefile || echo "un-needed file not found!"
	rm -rf $(debian-tmp)/sbin/sln || echo "un-needed file not found!"
	rm -rf $(debian-tmp)/usr/bin/makedb || echo "un-needed file not found!"
	rm -rf $(debian-tmp)/usr/bin/pcprofiledump || echo "un-needed file not found!"
	rm -rf $(debian-tmp)/usr/bin/xtrace || echo "un-needed file not found!"
	rm -rf $(debian-tmp)/var/lib/misc/Makefile  || echo "un-needed file not found!"
	# Generate gconv-modules.cache
	$(DEB_BUILDDIR)/elf/ld.so --library-path $(DEB_BUILDDIR) $(DEB_BUILDDIR)/iconv/iconvconfig  --prefix=$(CURDIR)/$(debian-tmp) -o $(CURDIR)/$(debian-tmp)/$(libdir)/gconv/gconv-modules.cache
	# Generate the list of SUPPORTED locales on main tmp
	$(MAKE) -f debian/generate-supported.mk IN=localedata/SUPPORTED OUT=$(debian-tmp)/usr/share/i18n/SUPPORTED
	# Remove un-installable files
	rm -rf $(debian-tmp)/usr/share/locale/*/LC_MESSAGES/libc.mo
# libc6-i386:amd64
	dh_auto_install --builddirectory=$(DEB_BUILDDIR_i386)
	# Install the Python pretty printers
	mkdir -p $(CURDIR)/$(debian-tmp-i386)/usr/share/gdb/auto-load/lib32
	perl -pe 'BEGIN {undef $$/; open(IN, "$(DEB_BUILDDIR_i386)/nptl/nptl_lock_constants.py"); $$j=<IN>;} s/from nptl_lock_constants import \*/$$j/g;' $(CURDIR)/nptl/nptl-printers.py > $(CURDIR)/$(debian-tmp-i386)/usr/share/gdb/auto-load/lib32/libc.so.6-gdb.py
	# Install an empty libpthread_nonshared.a to support broken closed
	# source software.
	ar crv $(CURDIR)/$(debian-tmp-i386)/usr/lib32/libpthread_nonshared.a
	#
	rm -r $(debian-tmp-i386)/etc/ld.so.cache
	mkdir -p $(debian-tmp-i386)/etc/ld.so.conf.d
	touch "$(debian-tmp-i386)/etc/ld.so.conf.d/zz_i386-biarch-compat.conf"
	printf "# Legacy biarch compatibility support\n/lib32\n/usr/lib32" | tee "$(debian-tmp-i386)/etc/ld.so.conf.d/zz_i386-biarch-compat.conf" > /dev/null
	mkdir -p "$(debian-tmp-i386)/var/cache/ldconfig"
	# Get rid of un-needed files
	/etc/ld.so.cache || echo "un-needed file not found!"
	rm -rf $(debian-tmp-i386)/etc/rpc || echo "un-needed file not found!"
	rm -rf $(debian-tmp-i386)/var/lib/misc/Makefile || echo "un-needed file not found!"
	rm -rf $(debian-tmp-i386)/sbin/sln || echo "un-needed file not found!"
	rm -rf $(debian-tmp-i386)/usr/bin/makedb || echo "un-needed file not found!"
	rm -rf $(debian-tmp-i386)/usr/bin/pcprofiledump || echo "un-needed file not found!"
	rm -rf $(debian-tmp-i386)/usr/bin/xtrace || echo "un-needed file not found!"
	rm -rf $(debian-tmp-i386)/var/lib/misc/Makefile  || echo "un-needed file not found!"
	# Generate gconv-modules.cache
	$(DEB_BUILDDIR_i386)/elf/ld.so --library-path $(DEB_BUILDDIR_i386) $(DEB_BUILDDIR_i386)/iconv/iconvconfig --prefix=$(CURDIR)/$(debian-tmp-i386) -o $(CURDIR)/$(debian-tmp-i386)/usr/lib32/gconv/gconv-modules.cache
	# Remove un-installable files
	rm -rf $(debian-tmp-i386)/usr/share/locale/*/LC_MESSAGES/libc.mo
## libc6-x32:amd64
	#dh_auto_install --builddirectory=$(DEB_BUILDDIR_x32)
endif
ifeq (i386,$(DEB_HOST_ARCH))
# libc6:$(DEB_HOST_ARCH)
	dh_auto_install --builddirectory=$(DEB_BUILDDIR)
# fixes from build.mk
	# Install the Python pretty printers
	mkdir -p $(CURDIR)/$(debian-tmp)/usr/share/gdb/auto-load/$(slibdir)
	perl -pe 'BEGIN {undef $$/; open(IN, "$(DEB_BUILDDIR)/nptl/nptl_lock_constants.py"); $$j=<IN>;} s/from nptl_lock_constants import \*/$$j/g;' $(CURDIR)/nptl/nptl-printers.py > $(CURDIR)/$(debian-tmp)/usr/share/gdb/auto-load/$(slibdir)/libc.so.6-gdb.py
	# Install an empty libpthread_nonshared.a to support broken closed
	# source software.
	ar crv $(CURDIR)/$(debian-tmp)/$(libdir)/libpthread_nonshared.a
	#
	mkdir -p $(debian-tmp)/etc/ld.so.conf.d
	touch "$(debian-tmp)/etc/ld.so.conf.d/i386-linux-gnu.conf"
	printf "# Multiarch support\n/usr/local/lib/i386-linux-gnu\n/lib/i386-linux-gnu\n/usr/lib/i386-linux-gnu\n/usr/local/lib/i686-linux-gnu\n/lib/i686-linux-gnu\n/usr/lib/i686-linux-gnu" | tee "$(debian-tmp)/etc/ld.so.conf.d/i386-linux-gnu.conf" > /dev/null
	mkdir -p "$(debian-tmp)/var/cache/ldconfig"
	# Create the multiarch include directories
	mkdir -p $(debian-tmp)/usr/include/$(DEB_HOST_MULTIARCH)
	mv $(debian-tmp)/usr/include/bits $(debian-tmp)/usr/include/$(DEB_HOST_MULTIARCH)
	mv $(debian-tmp)/usr/include/gnu $(debian-tmp)/usr/include/$(DEB_HOST_MULTIARCH)
	mv $(debian-tmp)/usr/include/sys $(debian-tmp)/usr/include/$(DEB_HOST_MULTIARCH)
	mv $(debian-tmp)/usr/include/fpu_control.h $(debian-tmp)/usr/include/$(DEB_HOST_MULTIARCH)
	mv $(debian-tmp)/usr/include/a.out.h $(debian-tmp)/usr/include/$(DEB_HOST_MULTIARCH)
	mv $(debian-tmp)/usr/include/ieee754.h $(debian-tmp)/usr/include/$(DEB_HOST_MULTIARCH)
	mkdir -p $(debian-tmp)/usr/include/finclude/$(DEB_HOST_MULTIARCH)
	# Get rid of un-needed files
	rm -rf $(debian-tmp)/etc/ld.so.cache || echo "un-needed file not found!"
	rm -rf $(debian-tmp)/etc/rpc || echo "un-needed file not found!"
	rm -rf $(debian-tmp)/var/lib/misc/Makefile || echo "un-needed file not found!"
	rm -rf $(debian-tmp)/sbin/sln || echo "un-needed file not found!"
	rm -rf $(debian-tmp)/usr/bin/makedb || echo "un-needed file not found!"
	rm -rf $(debian-tmp)/usr/bin/pcprofiledump || echo "un-needed file not found!"
	rm -rf $(debian-tmp)/usr/bin/xtrace || echo "un-needed file not found!"
	rm -rf $(debian-tmp)/var/lib/misc/Makefile  || echo "un-needed file not found!"
	# Generate gconv-modules.cache
	$(DEB_BUILDDIR)/elf/ld.so --library-path $(DEB_BUILDDIR) $(DEB_BUILDDIR)/iconv/iconvconfig  --prefix=$(CURDIR)/$(debian-tmp) -o $(CURDIR)/$(debian-tmp)/$(libdir)/gconv/gconv-modules.cache
	# Generate the list of SUPPORTED locales on main tmp
	$(MAKE) -f debian/generate-supported.mk IN=localedata/SUPPORTED OUT=$(debian-tmp)/usr/share/i18n/SUPPORTED
	# Remove un-installable files
	rm -rf $(debian-tmp)/usr/share/locale/*/LC_MESSAGES/libc.mo
	rm -rf $(debian-tmp)/usr/bin/lddlibc4
# libc6-amd64:i386
	dh_auto_install --builddirectory=$(DEB_BUILDDIR_amd64)
	# Install the Python pretty printers
	mkdir -p $(CURDIR)/$(debian-tmp-amd64)/usr/share/gdb/auto-load/lib64
	perl -pe 'BEGIN {undef $$/; open(IN, "$(DEB_BUILDDIR_amd64)/nptl/nptl_lock_constants.py"); $$j=<IN>;} s/from nptl_lock_constants import \*/$$j/g;' $(CURDIR)/nptl/nptl-printers.py > $(CURDIR)/$(debian-tmp-amd64)/usr/share/gdb/auto-load/lib64/libc.so.6-gdb.py
	# Install an empty libpthread_nonshared.a to support broken closed
	# source software.
	ar crv $(CURDIR)/$(debian-tmp-amd64)/usr/lib64/libpthread_nonshared.a
	#
	rm -r $(debian-tmp-amd64)/etc/ld.so.cache
	mkdir -p $(debian-tmp-amd64)/etc/ld.so.conf.d
	touch "$(debian-tmp-amd64)/etc/ld.so.conf.d/zz_amd64-biarch-compat.conf"
	printf "# Legacy biarch compatibility support\n/lib64\n/usr/lib64" | tee "$(debian-tmp-amd64)/etc/ld.so.conf.d/zz_amd64-biarch-compat.conf" > /dev/null
	mkdir -p "$(debian-tmp-amd64)/var/cache/ldconfig"
	# Get rid of un-needed files
	/etc/ld.so.cache || echo "un-needed file not found!"
	rm -rf $(debian-tmp-amd64)/etc/rpc || echo "un-needed file not found!"
	rm -rf $(debian-tmp-amd64)/var/lib/misc/Makefile || echo "un-needed file not found!"
	rm -rf $(debian-tmp-amd64)/sbin/sln || echo "un-needed file not found!"
	rm -rf $(debian-tmp-amd64)/usr/bin/makedb || echo "un-needed file not found!"
	rm -rf $(debian-tmp-amd64)/usr/bin/pcprofiledump || echo "un-needed file not found!"
	rm -rf $(debian-tmp-amd64)/usr/bin/xtrace || echo "un-needed file not found!"
	rm -rf $(debian-tmp-amd64)/var/lib/misc/Makefile  || echo "un-needed file not found!"
	# Generate gconv-modules.cache
	$(DEB_BUILDDIR_amd64)/elf/ld.so --library-path $(DEB_BUILDDIR_amd64) $(DEB_BUILDDIR_amd64)/iconv/iconvconfig --prefix=$(CURDIR)/$(debian-tmp-amd64) -o $(CURDIR)/$(debian-tmp-amd64)/usr/lib64/gconv/gconv-modules.cache
	# Remove un-installable files
	rm -rf $(debian-tmp-amd64)/usr/share/locale/*/LC_MESSAGES/libc.mo
	rm -rf $(debian-tmp-amd64)/usr/bin/lddlibc4
endif
# source
	$(LOCALEDEF) --quiet -c -f UTF-8 -i C $(CURDIR)/build-tree/C.utf8
	$(MAKE) -C $(DEB_BUILDDIRLIBC) $(NJOBS) \
	objdir=$(DEB_BUILDDIRLIBC) \
	install_root=$(CURDIR)/build-tree/locales-all \
	localedata/install-locale-files LOCALEDEF="$(LOCALEDEF)"
	# Remove the C.utf8 locale to avoid conflicts with the one in libc-bin
	rm -fr $(CURDIR)/build-tree/locales-all/usr/lib/locale/C.utf8
	rdfind -outputname /dev/null -makesymlinks true -removeidentinode false \
	$(CURDIR)/build-tree/locales-all/usr/lib/locale
	symlinks -r -s -c $(CURDIR)/build-tree/locales-all/usr/lib/locale

override_dh_install:
	dh_install
ifeq (amd64,$(DEB_HOST_ARCH))
	# libc6-i386
	mkdir -p debian/libc6-i386
	mkdir -p debian/libc6-i386/usr
	mkdir -p debian/libc6-i386/usr/lib32
	cp -rf $(debian-tmp-i386)/etc debian/libc6-i386/
	cp -rf $(debian-tmp-i386)/lib debian/libc6-i386/
	cp -rf $(debian-tmp-i386)/lib32 debian/libc6-i386/
	cp -rf $(debian-tmp-i386)/usr/lib32/audit debian/libc6-i386/usr/lib32/
	cp -rf $(debian-tmp-i386)/usr/lib32/gconv debian/libc6-i386/usr/lib32/
	# libc6-dev-i386
	mkdir -p debian/libc6-dev-i386
	mkdir -p debian/libc6-dev-i386/usr
	mkdir -p debian/libc6-dev-i386/usr/include/x86_64-linux-gnu/gnu/
	mkdir -p debian/libc6-dev-i386/usr/lib32
	mkdir -p debian/libc6-dev-i386/usr/share
	cp -rf $(debian-tmp-i386)/usr/include/gnu/stubs-32.h debian/libc6-dev-i386/usr/include/x86_64-linux-gnu/gnu/
	cp -rf $(debian-tmp-i386)/usr/include/gnu/lib-names-32.h debian/libc6-dev-i386/usr/include/x86_64-linux-gnu/gnu/
	cp -rf $(debian-tmp-i386)/usr/lib32/*.so debian/libc6-dev-i386/usr/lib32/
	cp -rf $(debian-tmp-i386)/usr/lib32/*.a debian/libc6-dev-i386/usr/lib32/
	cp -rf $(debian-tmp-i386)/usr/lib32/*.o debian/libc6-dev-i386/usr/lib32/
	cp -rf $(debian-tmp-i386)/usr/share/gdb debian/libc6-dev-i386/usr/share/
endif
ifeq (i386,$(DEB_HOST_ARCH))
	# libc6-amd64
	mkdir -p debian/libc6-amd64
	mkdir -p debian/libc6-amd64/usr
	mkdir -p debian/libc6-amd64/usr/lib64
	cp -rf $(debian-tmp-amd64)/etc debian/libc6-amd64/
	cp -rf $(debian-tmp-amd64)/lib64 debian/libc6-amd64/
	cp -rf $(debian-tmp-amd64)/usr/lib64/audit debian/libc6-amd64/usr/lib64/
	cp -rf $(debian-tmp-amd64)/usr/lib64/gconv debian/libc6-amd64/usr/lib64/
	# libc6-dev-amd64
	mkdir -p debian/libc6-dev-amd64
	mkdir -p debian/libc6-dev-amd64/usr
	mkdir -p debian/libc6-dev-amd64/usr/include/i386-linux-gnu/gnu/
	mkdir -p debian/libc6-dev-amd64/usr/lib64
	mkdir -p debian/libc6-dev-amd64/usr/share
	cp -rf $(debian-tmp-amd64)/usr/include/gnu/stubs-64.h debian/libc6-dev-amd64/usr/include/i386-linux-gnu/gnu/
	cp -rf $(debian-tmp-amd64)/usr/include/gnu/lib-names-64.h debian/libc6-dev-amd64/usr/include/i386-linux-gnu/gnu/
	cp -rf $(debian-tmp-amd64)/usr/lib64/*.so debian/libc6-dev-amd64/usr/lib64/
	cp -rf $(debian-tmp-amd64)/usr/lib64/*.a debian/libc6-dev-amd64/usr/lib64/
	cp -rf $(debian-tmp-amd64)/usr/lib64/*.o debian/libc6-dev-amd64/usr/lib64/
endif

override_dh_installdocs:
	for i in $(dh_listpackages); do dh_installdocs --doc-main-package=glibc-doc -p$i; done
	





